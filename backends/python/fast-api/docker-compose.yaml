services:
  db:
    image: postgres:16.1
    restart: always
    # volumes:
    #   # - ./data/db:/var/lib/postgresql/data
    #   # - ./pg_hba.conf:/var/lib/foo/pg_hba.conf
    # command: postgres -c hba_file=/var/lib/foo/pg_hba.conf
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


  benchmark:
    restart: always
    build:
      context: ./app
      dockerfile: ./Dockerfile
    # volumes:
    #   - "/app/notes/migrations/"

    ports:
      - "${PORT:-8000}:8000"

    environment:
      - DATABASE_NAME=postgres
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=db
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8000/"
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "${SERVICE_CPU_CORE_LIMIT:-1.0}" # Use the SERVICE_CPU_CORE_LIMIT environment variable, defaulting to 1.0
  tester:
    image: locustio/locust
    volumes:
      - ./tests:/mnt/locust
      - ./tests/results/${test_type}:/home/locust/
    command: >
      -f /mnt/locust/${test_type}.py 
      --csv benchmark 
      --run-time ${LOCUST_RUNTIME} 
      --headless 
      --users ${LOCUST_USERS} 
      --spawn-rate ${LOCUST_SPAWN_RATE} 
      -H http://benchmark:8000
      ${LOCUST_ARGS}
      --master
    # ports:
    #   - 8089:8089
    depends_on:
      benchmark:
        condition: service_healthy
  tester_worker:
    image: locustio/locust
    volumes:
      - ./tests:/mnt/locust
      - ./tests/results/${test_type}:/home/locust/
    command: >
      -f /mnt/locust/${test_type}.py 
      --worker --master-host tester
    depends_on:
      benchmark:
        condition: service_healthy
