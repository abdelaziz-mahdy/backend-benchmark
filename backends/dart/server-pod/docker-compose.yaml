
services:
  db:
    image: postgres:16.1
    # ports:
    #   - '8090:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: benchmark
      POSTGRES_PASSWORD: "5GTzDZoK5Ntnm8nimI_gG_2nifEhQhP8"
    # volumes:
    #   - benchmark_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5      
  redis:
    image: redis:6.2.6
    # ports:
    #   - '8091:6379'
    command: redis-server --requirepass "7W8rZScp3Df0KooszKNbRQe4b-HdSgjr"
    environment:
      - REDIS_REPLICATION_MODE=master
  benchmark:
    restart: always
    build:
      context: ./benchmark_server
      dockerfile: ./Dockerfile
    # volumes:
    #   - "/app/notes/migrations/"

    ports:
      - "${PORT:-8000}:8000"

    # environment:
    #   - DATABASE_NAME=postgres
    #   - DATABASE_USER=postgres
    #   - DATABASE_PASSWORD=postgres
    #   - DATABASE_HOST=db
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8000/"
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10
    depends_on:
      db:
        condition: service_healthy

  tester:
    image: locustio/locust
    volumes:
      - ./tests:/mnt/locust
      - ./tests/results/${test_type}:/home/locust/
    command: >
      -f /mnt/locust/${test_type}.py 
      --csv benchmark 
      --run-time ${LOCUST_RUNTIME} 
      --headless 
      --users ${LOCUST_USERS} 
      --spawn-rate ${LOCUST_SPAWN_RATE} 
      -H http://benchmark:8000
      ${LOCUST_ARGS}
      --master
    # ports:
    #   - 8089:8089
    depends_on:
      benchmark:
        condition: service_healthy
  tester_worker:
    image: locustio/locust
    volumes:
      - ./tests:/mnt/locust
      - ./tests/results/${test_type}:/home/locust/
    command: >
      -f /mnt/locust/${test_type}.py 
      --worker --master-host tester
    depends_on:
      benchmark:
        condition: service_healthy

# volumes:
#   benchmark_data:
